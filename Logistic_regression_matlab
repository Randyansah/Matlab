%clc
%close all
%clear all




data=readtable("diabetes2.csv")
a=sum(ismissing(data));

%feature Scaling
data.Pregnancies=(data.Pregnancies-min(data.Pregnancies))/max(data.Pregnancies)-min(data.Pregnancies)
data.Glucose=(data.Glucose-min(data.Glucose))/max(data.Glucose)/min(data.Glucose)
data.BloodPressure=(data.BloodPressure-min(data.BloodPressure))/max(data.BloodPressure)-min(data.BloodPressure)
data.SkinThickness=(data.SkinThickness-min(data.SkinThickness))/max(data.SkinThickness)-min(data.SkinThickness)
data.Insulin=(data.Insulin-min(data.Insulin))/max(data.Insulin)-min(data.Insulin)
data.BMI=(data.BMI-min(data.BMI))/max(data.BMI)-min(data.BMI)
data.DiabetesPedigreeFunction=(data.DiabetesPedigreeFunction-min(data.DiabetesPedigreeFunction))/max(data.DiabetesPedigreeFunction)-min(data.DiabetesPedigreeFunction)
data.Age=(data.Age-min(data.Age))/max(data.Age)-min(data.Age)


hold on
plot(data.Pregnancies,data.Glucose,'x')
xlabel("Pregnancies")
ylabel("Glucose")
title("Diabetes plot 1")
hold off


scatter(data.Pregnancies,data.Glucose)
xlabel("Pregnancies")
ylabel("Glucose")
title("Diabetes plot 2")

gscatter(data.Pregnancies,data.Glucose,data.BloodPressure)
xlabel("Pregnancies")
ylabel("Glucose")
title("Diabetes plot 3")


plot(data.Outcome,data.DiabetesPedigreeFunction,'x')
xlabel("Outcome")
ylabel("DiabetesPedigreeFunction")
title("Graph of people who have diabetes")

gscatter(data.DiabetesPedigreeFunction,data.BloodPressure,data.Outcome)
xlabel("Diabetes Pedigree Function ")
ylabel("blood pressure")
legend("Has Diabetes","No Diabetes")
title("A graph of people who has diabetes")





p=0.7 %Using 70% of the data for training
x=[data.DiabetesPedigreeFunction,data.BloodPressure]
y=(data.Outcome)
y=y+1
m=length(y)
idx=randperm(m)
xtrain=x(idx(1:round(p*m)),:);
ytrain=y(idx(1:round(p*m)),:);

xtest=x(idx(round(p*m)+1:end),:);
ytest=y(idx(round(p*m)+1:end),:);

B=mnrfit(xtrain,ytrain);

%training  set
mtrain=length(ytrain);
xtrain2=[ones(mtrain,1),xtrain];
ztrain=xtrain2*B;
htrain=1.0./(1+exp(-ztrain))

%test set
mtest=length(ytest);
xtest2=[ones(mtest,1),xtest];
ztest=xtest2*B;
htest=1.0./(1+exp(-ztest))

histogram(htrain,10)
histogram(htest,10)

scatter(xtrain(:,1),xtrain(:,2),ytrain,htrain)
cb=colorbar();

scatter(xtest(:,1),xtest(:,2),ytest,htest)
cb=colorbar();

gscatter(x(:,1),x(:,2),y)
hold on;
xlabel("Diabetes Pedigree Function ")
ylabel("blood pressure")
legend("Has Diabetes","No Diabetes")
title("A graph of people who has diabetes")
plot(x(:,1),-(B(1)*1+B(2)*x(:,1))/B(3)); hold off;


%training set
ytrainpred=htrain<0.5
ytrainpred=ytrainpred+1
gscatter(xtrain(:,1),xtrain(:,2),ytrainpred)
accuracy_training=mean(double(ytrainpred==ytrain))*100


%test set
ytestpred=htest<0.5
ytestpred=ytestpred+1
gscatter(xtest(:,1),xtest(:,2),ytestpred)
accuracy_test=mean(double(ytestpred==ytest))*100


%Precision and Recall
Truely_has_Diabetes=sum(double(ytest==2))
predicted_has_diabetes=sum(double(ytestpred==2))
true_positive=sum(double(ytest==2) .* double(ytestpred==2))

precision=true_positive/predicted_has_diabetes

recall=true_positive/Truely_has_Diabetes

%F1_score
f1=2*precision*recall/(precision+recall)
